use super::TokenType;

impl TokenType {
    pub fn to_string(&self) -> String {
        let s = match self {
            Self::Extends => "extends",
            Self::Strict => "strict",
            Self::RecordStmt => "record",
            Self::Label => "label",
            Self::In => "in",
            Self::For => "for",
            Self::Enum => "enum",
            Self::Tuple => "Tuple",
            Self::TupleLit => "tuple literal",
            Self::VecT => "Vec",
            Self::VecLit => "vector literal",
            Self::Record => "Record",
            Self::Sh => "sh",
            Self::Type | Self::TypeStmt => "type",
            Self::Bang => "!",
            Self::DblBang => "!!",
            Self::Prcnt => "%",
            Self::And => "&",
            Self::DblAnd => "&&",
            Self::Mul => "*",
            Self::Sqr => "**",
            Self::LParen => "(",
            Self::RParen => ")",
            Self::Min => "-",
            Self::Decr => "--",
            Self::Arrow => "->",
            Self::ArrowBig => "=>",
            Self::Underscore => "_",
            Self::Plus => "+",
            Self::Incr => "++",
            Self::Assign => "=",
            Self::Eq => "==",
            Self::BangEq => "!=",
            Self::PlusEq => "+=",
            Self::MinEq => "-=",
            Self::MulEq => "*=",
            Self::DivEq => "/=",
            Self::LBrace => "{",
            Self::RBrace => "}",
            Self::LBracket => "[",
            Self::RBracket => "]",
            Self::Semi => ";",
            Self::Colon => ":",
            Self::DblColon => "::",
            Self::CharLit => "char literal",
            Self::StrLit => "string literal",
            Self::NumLit => "number literal",
            Self::TrueLit => "true literal",
            Self::FalseLit => "false literal",
            Self::FuncIdent => "function type",
            Self::Ls => "<",
            Self::LsOrEq => "<=",
            Self::Gr => ">",
            Self::GrOrEq => ">=",
            Self::Comma => ",",
            Self::Dot => ".",
            Self::DblDot => "..",
            Self::Div => "/",
            Self::Esc => "\\",
            Self::LParse => "\\{",
            Self::RParse => "\\}",
            Self::Qstn => "?",
            Self::Pipe => "|",
            Self::Or => "||",
            Self::Ident => "identifier",
            Self::Eof => "end of file",
            Self::Let => "let keyword",
            Self::If => "if keyword",
            Self::Else => "else keyword",
            Self::Elif => "elif keyword",
            Self::Return => "return keyword",
            Self::While => "while keyword",
            Self::Break => "break keyword",
            Self::Match => "match keyword",
            Self::Mod => "mod keyword",
            Self::Use => "use keyword",
            Self::As => "as keyword",
            Self::From => "from keyword",
            Self::Async => "async keyword",
            Self::Await => "await keyword",
            Self::Pub => "pub keyword",
            Self::Mut => "mut keyword",
            Self::Func => "function keyword",
            Self::NumIdent => "number",
            Self::StrIdent => "string",
            Self::CharIdent => "char",
            Self::BoolIdent => "bool",
            Self::Null => "null",
            Self::VoidIdent => "void",
            Self::ArrayIdent => "array",
            Self::AnyIdent => "any",
        };

        s.to_string()
    }
}
